Package: com.mrhart
Name: Main Package
Type: System
Version: v2.10

-------------------------------------------------------------------------------

Updates:
	v2.10
- Moved Initializer to (this) Main Package.
- Removed Starting Mode authority from GameWorld and gave it to Initializer.
This really is Initializer's job, and requires less code conflicts in GameWorld
if it is modified.
	v2.00
- Massive overhaul of system.

-------------------------------------------------------------------------------

Description:
	This is the "main" package of Hart Tools. It will only contain the most
crucial classes for creating your LibGDX game. The only places for code
modification should be in the Initializer (originally in the Backend package)
and maybe in the pause and resizing sections of GameScreen.

-------------------------------------------------------------------------------

How it Works:
	When you open your game on a given platform, that platform's launcher is
constructed; in each of those constructors is some call to construct a new
`Game` object. That call is essentially the first domino in the chain of events
that get your game moving.
	The `Game` class fulfills the `ApplicationListener` interface which is what
is required in the platform launcher code. It has a number of required methods
to make your game run, the most important being "render." All these methods are
fulfilled by our `GameScreen` class.
	`GameScreen` is created in the `Game` class in its "onCreate" function.
`GameScreen` is the main control hub for all things related to your game. It
creates `GameWorld` and `GameRenderer`, as well as creates the Camera and
Viewport (makes the view on every device look the same). `GameScreen` also
keeps track of the current runtime in the game (for animations) and initializes
everything in the `Initializer`.
	In `GameScreen`, the render function is called every cpu cycle. In the
render function, first the delta time (seconds since last cpu cycle) is added
to the current runtime. Next `GameWorld`'s update function is called and
finally `GameRenderer`'s render function is called. 

-------------------------------------------------------------------------------

How the Dev should use this package:
	As stated before, this package requires virtually no code modification. For
the large majority of projects, these classes can run stand-alone. Places that
could be modified would include the resizing, pausing, and hiding functions in
`GameScreen`; these functions are called when the respective action is
performed (e.g. pause is called when your application has been paused).
	Initializer now sits in the main package; so to change your starting Mode,
modify the Initializer's STARTING_MODE static constant.